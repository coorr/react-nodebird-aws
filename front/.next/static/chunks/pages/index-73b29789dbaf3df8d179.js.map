{"version":3,"sources":["webpack://_N_E/./src/components/PostForm.js","webpack://_N_E/./src/pages/index.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js"],"names":["PostForm","useSelector","state","post","imagePaths","addPostDone","addPostLoading","dispatch","useDispatch","useInput","text","onChangeText","setText","useEffect","onSubmit","useCallback","trim","alert","formData","FormData","forEach","p","append","type","ADD_POST_REQUEST","data","imageInput","useRef","onClickImageUpload","current","click","onChangeImages","e","imageFormData","call","target","files","f","UPLOAD_IMAGES_REQUEST","onRemoveImage","index","REMOVE_REQUEST","style","margin","encType","onFinish","TextArea","value","onChange","maxLength","placeholder","name","multiple","hidden","ref","onClick","float","htmlType","loading","map","v","i","display","src","replace","width","alt","Home","me","user","mainPosts","hasMorePost","loadPostsLoading","retweetError","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","console","log","LOAD_POSTS_REQUEST","addEventListener","removeEventListener","AppLayout","PostCard","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/index-73b29789dbaf3df8d179.js","sourcesContent":["import { Button, Form, Input } from 'antd';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useInput from '../hooks/useInput';\r\nimport { UPLOAD_IMAGES_REQUEST ,REMOVE_REQUEST, ADD_POST_REQUEST} from '../reducers/post';\r\nimport { backUrl } from '../config/config'\r\n\r\nconst PostForm = () => {\r\n  const { imagePaths , addPostDone, addPostLoading } = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n  const [text , onChangeText, setText] = useInput('');\r\n\r\n  useEffect(() => {\r\n    if(addPostDone) {\r\n      setText('');\r\n    }\r\n  },[addPostDone])\r\n  \r\n  const onSubmit = useCallback(() => {\r\n    if(!text || !text.trim()) {\r\n      return alert(\"게시글을 작성하세요.\")\r\n    }\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);\r\n    });\r\n    formData.append('content', text);\r\n    return dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    })\r\n  }, [text, imagePaths]);\r\n\r\n  const imageInput = useRef();\r\n  const onClickImageUpload = useCallback(()=> {\r\n    imageInput.current.click();\r\n  }, [imageInput.current])\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    })\r\n    \r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    })\r\n  })\r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_REQUEST,\r\n      data: index\r\n    })\r\n  })\r\n\r\n  return (\r\n    <Form style={{margin: '10px 0 20px'}} encType='multipart/form-data' onFinish={onSubmit} >\r\n      <Input.TextArea \r\n        value={text}\r\n        onChange={onChangeText}\r\n        maxLength={140}\r\n        placeholder='어떤 신기한 일이 있었나요?'\r\n      />\r\n      <div>\r\n        <input type='file' name='image'  multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload} >이미지 업로드</Button>\r\n        <Button type='primary' style={{float: 'right'}} htmlType='submit' loading={addPostLoading} >쨱쨱</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v,i) => (\r\n          <div key={v} style={{display: 'inline-block'}}>\r\n            <img src={v.replace(/\\/thumb\\//, '/original/')} style={{width: '200px'}} alt={v} />\r\n            <div>\r\n              <Button onClick={onRemoveImage(i)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;   ","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm.js';\r\nimport PostCard from '../components/PostCard.js';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostsLoading, retweetError } = useSelector((state) => state.post);\r\n\r\n   useEffect(() => {\r\n    if(retweetError) {\r\n      alert(retweetError);\r\n    }\r\n  }, [retweetError]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight- 200) {\r\n        if(hasMorePost && !loadPostsLoading) {\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n          console.log(lastId);\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll',onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll)\r\n    }\r\n  }, [hasMorePost, loadPostsLoading, mainPosts]);\r\n\r\n  \r\n  return (\r\n    <AppLayout>\r\n     { me && <PostForm />}\r\n     { mainPosts.map((post) =>  <PostCard key={post.id} post={post} /> )}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) =>  {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie= '';\r\n  if(context.req && cookie) {\r\n    axios.defaults.headers.Cookie= cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST\r\n  })\r\n  context.store.dispatch({\r\n    type: LOAD_POSTS_REQUEST,\r\n  });\r\n  context.store.dispatch(END)\r\n  await context.store.sagaTask.toPromise();\r\n})\r\n\r\nexport default Home;","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n  "],"sourceRoot":""}